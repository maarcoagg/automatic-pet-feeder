/* 
  Bloody Tears from Castlevania II
  Connect a piezo buzzer or speaker to pin 11 or select a new pin.
  More songs available at https://github.com/robsoncouto/arduino-songs                                            
                                              
                                              Robson Couto, 2019
*/


#define NOTE_C3  131
#define NOTE_CS3 139
#define NOTE_D3  147
#define NOTE_DS3 156
#define NOTE_E3  165
#define NOTE_F3  175
#define NOTE_FS3 185
#define NOTE_G3  196
#define NOTE_GS3 208
#define NOTE_A3  220
#define NOTE_AS3 233
#define NOTE_B3  247
#define NOTE_C4  262
#define NOTE_CS4 277
#define NOTE_D4  294
#define NOTE_DS4 311
#define NOTE_E4  330
#define NOTE_F4  349
#define NOTE_FS4 370
#define NOTE_G4  392
#define NOTE_GS4 415
#define NOTE_A4  440
#define NOTE_AS4 466
#define NOTE_B4  494
#define REST 0

// change this to make the song slower or faster
int tempo = 120;

// change this to whichever pin you want to use
int buzzer = 6;

const PROGMEM int melody[] = {
  
  NOTE_E3, 16, NOTE_G3, 16,
  NOTE_E3, 16, NOTE_G3, 16,
  NOTE_A3, 16, NOTE_G3, 16,
  NOTE_A3, 16, NOTE_G3, 16,
  NOTE_AS3, 16, NOTE_G3, 16,
  NOTE_A3, 16, NOTE_G3, 16,
  NOTE_AS3, 16, NOTE_B3, 16,
  NOTE_D4, 8, 
  
  NOTE_E3, 16, NOTE_G3, 16,
  NOTE_E3, 16, NOTE_G3, 16,
  NOTE_A3, 16, NOTE_G3, 16,
  NOTE_A3, 16, NOTE_G3, 16,
  NOTE_AS3, 16, NOTE_A3, 16,
  NOTE_G3, 16, NOTE_E3, 4
  
  
};

// sizeof gives the number of bytes, each int value is composed of two bytes (16 bits)
// there are two values per note (pitch and duration), so for each note there are four bytes
int notes = sizeof(melody) / sizeof(melody[0]) / 2;

// this calculates the duration of a whole note in ms (60s/tempo)*4 beats
int wholenote = (60000 * 4) / tempo;

int divider = 0, noteDuration = 0;

void setup() {
  // iterate over the notes of the melody.
  // Remember, the array is twice the number of notes (notes + durations)
  for (int thisNote = 0; thisNote < notes * 2; thisNote = thisNote + 2) {

    // calculates the duration of each note
    divider = pgm_read_word_near(melody+thisNote + 1);
    if (divider > 0) {
      // regular note, just proceed
      noteDuration = (wholenote) / divider;
    } else if (divider < 0) {
      // dotted notes are represented with negative durations!!
      noteDuration = (wholenote) / abs(divider);
      noteDuration *= 1.5; // increases the duration in half for dotted notes
    }

    // we only play the note for 90% of the duration, leaving 10% as a pause
    tone(buzzer, pgm_read_word_near(melody+thisNote ), noteDuration * 0.9);

    // Wait for the specief duration before playing the next note.
    delay(noteDuration);

    // stop the waveform generation before the next note.
    noTone(buzzer);
  }
}

void loop() {
  // no need to repeat the melody.
}